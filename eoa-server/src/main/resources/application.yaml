server:
  port: ${server_port:48080}
  shutdown: graceful #开启优雅停机

spring:
  application:
    name: eoa-server

  lifecycle:
    timeout-per-shutdown-phase: 180s #设置缓冲时间 默认30s

  main:
    allow-circular-references: true # 允许循环依赖，因为项目是三层架构，无法避免这个情况。
    allow-bean-definition-overriding: true
  # Servlet 配置
  servlet:
    # 文件上传相关配置项
    multipart:
      max-file-size: ${max-file-size:1073741824} #单个文件大小  1GB=1073741824
      max-request-size: ${max-request-size:1073741824} # 设置总上传的文件大小
  freemarker:
    template-loader-path: classpath*:/templates/
  mvc:
    pathmatch:
      matching-strategy: ANT_PATH_MATCHER # 解决 SpringFox 与 SpringBoot 2.6.x 不兼容的问题，参见 SpringFoxHandlerProviderBeanPostProcessor 类
#    throw-exception-if-no-handler-found: true # 404 错误时抛出异常，方便统一处理
#    static-path-pattern: /static/** # 静态资源路径; 注意：如果不配置，则 throw-exception-if-no-handler-found 不生效！！！ TODO 芋艿：不能配置，会导致 swagger 不生效

  # Jackson 配置项
  jackson:
    serialization:
      write-dates-as-timestamps: true # 设置 Date 的格式，使用时间戳
      write-date-timestamps-as-nanoseconds: false # 设置不使用 nanoseconds 的格式。例如说 1611460870.401，而是直接 1611460870401
      write-durations-as-timestamps: true # 设置 Duration 的格式，使用时间戳
      fail-on-empty-beans: false # 允许序列化无属性的 Bean

  # Cache 配置项
  cache:
    type: REDIS
    redis:
      time-to-live: 1h # 设置过期时间为 1 小时

  messages:
    basename: i18n/messages,i18n/eoa-msg
    encoding: UTF-8

--- #################### 数据库相关配置 ####################

spring:
  # 数据源配置项
  autoconfigure:
    exclude:
      - com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure # 排除 Druid 的自动配置，使用 dynamic-datasource-spring-boot-starter 配置多数据源
      - org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration # 排除积木报表带来的 MongoDB 的自动配置
  datasource:
    druid: # Druid 【监控】相关的全局配置
      web-stat-filter:
        enabled: true
      stat-view-servlet:
        enabled: ${druid_stat_view_enable:true}
        allow: ${druid_stat_view_allow:} # 设置白名单，不填则允许所有访问
        url-pattern: /druid/*
        login-username: ${druid_stat_view_username:admin} # 控制台管理用户名和密码
        login-password: ${druid_stat_view_password:druid}
      filter:
        stat:
          enabled: true
          log-slow-sql: true # 慢 SQL 记录
          slow-sql-millis: 100
          merge-sql: true
        wall:
          config:
            multi-statement-allow: true
    dynamic: # 多数据源配置
      druid: # Druid 【连接池】相关的全局配置
        initial-size: 5 # 初始连接数
        min-idle: 10 # 最小连接池数量
        max-active: 20 # 最大连接池数量
        max-wait: 600000 # 配置获取连接等待超时的时间，单位：毫秒
        time-between-eviction-runs-millis: 60000 # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位：毫秒
        min-evictable-idle-time-millis: 300000 # 配置一个连接在池中最小生存的时间，单位：毫秒
        max-evictable-idle-time-millis: 900000 # 配置一个连接在池中最大生存的时间，单位：毫秒
        validation-query: SELECT 1 # 配置检测连接是否有效
        test-while-idle: true
        test-on-borrow: false
        test-on-return: false
      primary: master
      datasource:
        master:
          name: ${jdbc_db:eoa-db}
          url: jdbc:mysql://${jdbc_host:10.0.4.13:3306}/${spring.datasource.dynamic.datasource.master.name}?useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
          driver-class-name: com.mysql.cj.jdbc.Driver
          username: ${jdbc_user:eoa}
          password: ${jdbc_password:eoa}
        slave: # 模拟从库，可根据自己需要修改 # 模拟从库，可根据自己需要修改
          name: ${jdbc_db:eoa-db}
          url: jdbc:mysql://${jdbc_host:10.0.4.13:3306}/${spring.datasource.dynamic.datasource.slave.name}?useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
          driver-class-name: com.mysql.cj.jdbc.Driver
          username: ${jdbc_user:eoa}
          password: ${jdbc_password:eoa}

#        obpm: # 集成OpenBPM使用
#          name: ${obpm_jdbc_db:bpm-db}
#          driver-class-name: ${jdbc_driver:com.mysql.cj.jdbc.Driver}
#          url: jdbc:mysql://${obpm_jdbc_host:10.0.4.13:3306}/${spring.datasource.dynamic.datasource.obpm.name}?useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
#          #url: ${obpm_jdbc_url:jdbc:mysql://mysql:3306/bpm-db?serverTimezone=Asia/Shanghai&useUnicode=true&characterEncoding=utf-8&allowMultiQueries=true&useSSL=false&nullCatalogMeansCurrent=true}
#          username: ${obpm_jdbc_user:bpm}
#          password: ${obpm_jdbc_password:bpm}
  # liquibase (openBpm)
  liquibase:
    enabled: ${liquibase_enabled:false}

  # Redis 配置。Redisson 默认的配置足够使用，一般不需要进行调优
  redis:
    host: ${redis_host:127.0.0.1} # 地址
    port: ${redis_port:6378} # 端口
    database: ${redis_db:4} # 数据库索引
    password: ${redis_password:nopass} # 密码，建议生产环境开启




--- #################### 接口文档配置 ####################

springdoc:
  api-docs:
    enabled: true
    path: /v3/api-docs
  swagger-ui:
    enabled: true
    path: /swagger-ui
  default-flat-param-object: true # 参见 https://doc.xiaominfo.com/docs/faq/v4/knife4j-parameterobject-flat-param 文档

knife4j:
  enable: true
  setting:
    language: zh_cn

# 工作流 Flowable 配置
flowable:
  # 1. false: 默认值，Flowable 启动时，对比数据库表中保存的版本，如果不匹配。将抛出异常
  # 2. true: 启动时会对数据库中所有表进行更新操作，如果表存在，不做处理，反之，自动创建表
  # 3. create_drop: 启动时自动创建表，关闭时自动删除表
  # 4. drop_create: 启动时，删除旧表，再创建新表
  database-schema-update: false # 设置为 false，可通过 https://github.com/flowable/flowable-sql 初始化
  db-history-used: true # flowable6 默认 true 生成信息表，无需手动设置
  check-process-definitions: false # 设置为 false，禁用 /resources/processes 自动部署 BPMN XML 流程
  history-level: full # full：保存历史数据的最高级别，可保存全部流程相关细节，包括流程流转各节点参数

# MyBatis Plus 的配置项
mybatis-plus:
  configuration:
    map-underscore-to-camel-case: true # 虽然默认为 true ，但是还是显示去指定下。
  global-config:
    db-config:
      id-type: NONE # “智能”模式，基于 IdTypeEnvironmentPostProcessor + 数据源的类型，自动适配成 AUTO、INPUT 模式。
#      id-type: AUTO # 自增 ID，适合 MySQL 等直接自增的数据库
#      id-type: INPUT # 用户输入 ID，适合 Oracle、PostgreSQL、Kingbase、DB2、H2 数据库
#      id-type: ASSIGN_ID # 分配 ID，默认使用雪花算法。注意，Oracle、PostgreSQL、Kingbase、DB2、H2 数据库时，需要去除实体类上的 @KeySequence 注解
      logic-delete-value: 1 # 逻辑已删除值(默认为 1)
      logic-not-delete-value: 0 # 逻辑未删除值(默认为 0)
  type-handlers-package: classpath*:org.openbpm.base.db.model.typehandler #obpm
  type-aliases-package: ${eap.info.base-package}.module.*.dal.dataobject, classpath*:**/dao #eap,obpm
  encryptor:
    password: XDV71a+xqStEA3WH # 加解密的秘钥，可使用 https://www.imaegoo.com/2020/aes-key-generator/ 网站生成
  mapper-locations: classpath*:mapper/**/*.xml
--- #################### 验证码相关配置 ####################

aj:
  captcha:
    jigsaw: classpath:images/jigsaw # 滑动验证，底图路径，不配置将使用默认图片；以 classpath: 开头，取 resource 目录下路径
    pic-click: classpath:images/pic-click # 滑动验证，底图路径，不配置将使用默认图片；以 classpath: 开头，取 resource 目录下路径
    cache-type: redis # 缓存 local/redis...
    cache-number: 1000 # local 缓存的阈值,达到这个值，清除缓存
    timing-clear: 180 # local定时清除过期缓存(单位秒),设置为0代表不执行
    type: blockPuzzle # 验证码类型 default两种都实例化。 blockPuzzle 滑块拼图 clickWord 文字点选
    water-mark: openEAP # 右下角水印文字(我的水印)，可使用 https://tool.chinaz.com/tools/unicode.aspx 中文转 Unicode，Linux 可能需要转 unicode
    interference-options: 0 # 滑动干扰项(0/1/2)
    req-frequency-limit-enable: false # 接口请求次数一分钟限制是否开启 true|false
    req-get-lock-limit: 5 # 验证失败 5 次，get接口锁定
    req-get-lock-seconds: 10 # 验证失败后，锁定时间间隔
    req-get-minute-limit: 30 # get 接口一分钟内请求数限制
    req-check-minute-limit: 60 # check 接口一分钟内请求数限制
    req-verify-minute-limit: 60 # verify 接口一分钟内请求数限制

--- #################### eap相关配置 ####################

eap:
  info:
    version: 1.0.0
    base-package: org.openea.eap
  enableOpenBpm: ${obpm_enable:false}
  userDataType: ${eap_userDataType:}
  obpm:
    proxy: ${obpm_proxy:true}
    apiBaseUrl: ${obpm_api_baseurl:/obpm-server}
    webBaseUrl: ${obpm_web_baseurl:/obpm-web1}
    adminBaseUrl: ${obpm_admin_baseurl:/obpm-admin}
  web:
    admin-ui:
      url: http://dashboard.eap.openea.org # Admin 管理后台 UI 的地址
  security:
    permit-all_urls:
      - /admin-api/mp/open/** # 微信公众号开放平台，微信回调接口，不需要登录
      - /admin-api/obpm-admin/**
      - /obpm-admin/**
      - /admin-api/obpm-web1/**
      - /obpm-web1/**
  websocket:
    enable: true # websocket的开关
    path: /websocket/message # 路径
    maxOnlineCount: 0 # 最大连接人数
    sessionMap: true # 保存sessionMap
  swagger:
    title: EAP快速开发平台
    description: 提供管理后台、用户 App 的所有功能
    version: ${eap.info.version}
    url: ${eap.web.admin-ui.url}
    email: admin@openea.org
    license: MIT
    license-url: https://raw.githubusercontent.com/eaopen/openea-eap/dev/doc/yudao/LICENSE
  captcha:
    enable: false # 验证码的开关，默认为 true
  codegen:
    base-package: ${eap.info.base-package:org.openea.eap}
    db-schemas: ${spring.datasource.dynamic.datasource.master.name}
    front-type: 10 # 前端模版的类型，参见 CodegenFrontTypeEnum 枚举类
  error-code: # 错误码相关配置项
    constants-class-list:
      - org.openea.eap.module.bpm.enums.ErrorCodeConstants
      - org.openea.eap.module.infra.enums.ErrorCodeConstants
      - org.openea.eap.module.member.enums.ErrorCodeConstants
      - org.openea.eap.module.system.enums.ErrorCodeConstants
  i18n:
    enable: true
  mq:
    redis:
      pubsub:
        enable: false # 是否开启 Redis pubsub 广播消费，默认为 true。这里设置成 false，可以按需开启
      stream:
        enable: false  # 是否开启 Redis stream 集群消费，默认为 true。这里设置成 false，可以按需开启

  xss:
    enable: false
    exclude-urls: # 如下两个 url，仅仅是为了演示，去掉配置也没关系
      - ${spring.boot.admin.context-path}/** # 不处理 Spring Boot Admin 的请求
      - ${management.endpoints.web.base-path}/** # 不处理 Actuator 的请求

  sms-code: # 短信验证码相关的配置项
    expire-times: 10m
    send-frequency: 1m
    send-maximum-quantity-per-day: 10
    begin-code: 9999 # 这里配置 9999 的原因是，测试方便。
    end-code: 9999 # 这里配置 9999 的原因是，测试方便。
  cache: # spring cache 相关配置
    redis-scan-batch-size: 30 # redis scan 一次返回数量
  demo: false # 开启演示模式

--- #################### eap相关配置2 ####################

debug: false

chatgpt:
  token: ${chatgpt_token:sk-xxxxxxxxxxxxxxxxxxxx} #必填
#  proxy-host: 127.0.0.1 #需要代理时必填
#  proxy-port: 7890 #需要代理时必填
#  model: text-davinci-003 #可选
#  chat-model: gpt-3.5-turbo #可选
#  retries: 10 #可选，默认为5
#  session-expiration-time: 30 #可选，不填则会话永不过期

#积木报表配置
minidao :
  base-package: org.jeecg.modules.jmreport.desreport.dao*
  db-type: mysql


justauth:
  ## bug when enabled = false
  ## Consider defining a bean of type 'org.openea.eap.framework.social.core.EapAuthRequestFactory' in your configuration
  enabled: ${justauth_enable:true}
  type:
    DINGTALK: # 钉钉
      client-id: dingvrnreaje3yqvzhxg
      client-secret: i8E6iZyDvZj51JIb0tYsYfVQYOks9Cq1lgryEjFRqC79P3iJcrxEwT6Qk2QvLrLI
      ignore-check-redirect-uri: true
    WECHAT_ENTERPRISE: # 企业微信
      client-id: wwd411c69a39ad2e54
      client-secret: 1wTb7hYxnpT2TUbIeHGXGo7T0odav1ic10mLdyyATOw
      agent-id: 1000004
      ignore-check-redirect-uri: true
  cache:
    type: REDIS
    prefix: 'social_auth_state:' # 缓存前缀，目前只对 Redis 缓存生效，默认 JUSTAUTH::STATE::
    timeout: 24h # 超时时长，目前只对 Redis 缓存生效，默认 3 分钟

--- #################### 微信公众号相关配置 ####################
wx: # 参见 https://github.com/Wechat-Group/WxJava/blob/develop/spring-boot-starters/wx-java-mp-spring-boot-starter/README.md 文档
  mp:
    # 公众号配置(必填)
    app-id: ${wx_mp_appid:wx041349c6f39b268b}
    secret: ${wx_mp_secret:5abee519483bc9f8cb37ce280e814bd0}
    # 存储配置，解决 AccessToken 的跨节点的共享
    config-storage:
      type: RedisTemplate # 采用 RedisTemplate 操作 Redis，会自动从 Spring 中获取
      key-prefix: wx # Redis Key 的前缀 TODO 芋艿：解决下 Redis key 管理的配置
      http-client-type: HttpClient # 采用 HttpClient 请求微信公众号平台
  miniapp: # 小程序配置（必填），参见 https://github.com/Wechat-Group/WxJava/blob/develop/spring-boot-starters/wx-java-miniapp-spring-boot-starter/README.md 文档
    appid: ${wx_mini_appid:wx63c280fe3248a3e7}
    secret: ${wx_mini_secret:6f270509224a7ae1296bbf1c8cb97aed}
    config-storage:
      type: RedisTemplate # 采用 RedisTemplate 操作 Redis，会自动从 Spring 中获取
      key-prefix: wa # Redis Key 的前缀 TODO 芋艿：解决下 Redis key 管理的配置
      http-client-type: HttpClient # 采用 HttpClient 请求微信公众号平台


--- #################### 定时任务相关配置 ####################

# Quartz 配置项，对应 QuartzProperties 配置类
spring:
  quartz:
    auto-startup: true # 测试环境，需要开启 Job
    scheduler-name: schedulerName # Scheduler 名字。默认为 schedulerName
    job-store-type: jdbc # Job 存储器类型。默认为 memory 表示内存，可选 jdbc 使用数据库。
    wait-for-jobs-to-complete-on-shutdown: true # 应用关闭时，是否等待定时任务执行完成。默认为 false ，建议设置为 true
    properties: # 添加 Quartz Scheduler 附加属性，更多可以看 http://www.quartz-scheduler.org/documentation/2.4.0-SNAPSHOT/configuration.html 文档
      org:
        quartz:
          # Scheduler 相关配置
          scheduler:
            instanceName: schedulerName
            instanceId: AUTO # 自动生成 instance ID
          # JobStore 相关配置
          jobStore:
            # JobStore 实现类。可见博客：https://blog.csdn.net/weixin_42458219/article/details/122247162
            class: org.springframework.scheduling.quartz.LocalDataSourceJobStore
            isClustered: true # 是集群模式
            clusterCheckinInterval: 15000 # 集群检查频率，单位：毫秒。默认为 15000，即 15 秒
            misfireThreshold: 60000 # misfire 阀值，单位：毫秒。
          # 线程池相关配置
          threadPool:
            threadCount: 25 # 线程池大小。默认为 10 。
            threadPriority: 5 # 线程优先级
            class: org.quartz.simpl.SimpleThreadPool # 线程池类型
    jdbc: # 使用 JDBC 的 JobStore 的时候，JDBC 的配置
      initialize-schema: NEVER # 是否自动使用 SQL 初始化 Quartz 表结构。这里设置成 never ，我们手动创建表结构。

--- #################### 服务保障相关配置 ####################

# Lock4j 配置项
lock4j:
  acquire-timeout: 3000 # 获取分布式锁超时时间，默认为 3000 毫秒
  expire: 30000 # 分布式锁的超时时间，默认为 30 毫秒

# Resilience4j 配置项
resilience4j:
  ratelimiter:
    instances:
      backendA:
        limit-for-period: 1 # 每个周期内，允许的请求数。默认为 50
        limit-refresh-period: 60s # 每个周期的时长，单位：微秒。默认为 500
        timeout-duration: 1s # 被限流时，阻塞等待的时长，单位：微秒。默认为 5s
        register-health-indicator: true # 是否注册到健康监测

--- #################### 监控相关配置 ####################

# Actuator 监控端点的配置项
management:
  endpoints:
    web:
      base-path: /actuator # Actuator 提供的 API 接口的根目录。默认为 /actuator
      exposure:
        include: '*' # 需要开放的端点。默认值只打开 health 和 info 两个端点。通过设置 * ，可以开放所有端点。

# Spring Boot Admin 配置项
spring:
  boot:
    admin:
      # Spring Boot Admin Client 客户端的相关配置
      client:
        url: http://127.0.0.1:${server.port}/${spring.boot.admin.context-path} # 设置 Spring Boot Admin Server 地址
        instance:
          service-host-type: IP # 注册实例时，优先使用 IP [IP, HOST_NAME, CANONICAL_HOST_NAME]
      # Spring Boot Admin Server 服务端的相关配置
      context-path: /admin # 配置 Spring

# 日志文件配置
logging:
  level:
    root: ${logging_level_root:INFO}
    org.openea.eap: WARN
    org.openbpm: WARN
    org.openbpm.base.db: INFO
    org.openbpm.base.db.transaction: INFO
    org.springframework: WARN
    org.springframework.boot.autoconfigure: ERROR
    org.springframework.data.redis: WARN
    org.springframework.jdbc.core.StatementCreatorUtils: WARN
    org.springframework.web.servlet.mvc.support: ERROR
    org.mybatis.spring.mapper.ClassPathMapperScanner: ERROR
    springfox.documentation.builders.FormParameterSpecificationProvider: ERROR
    springfox.documentation.swagger.readers.operation.OperationImplicitParameterReader: ERROR
    org.openea.eap.framework.i18n.core.I18nUtil: ERROR
  file:
    name: ${user.home}/logs/${spring.application.name}.log # 日志文件名，全路径


--- #################### extj相关配置 ####################

config:
  # ===============静态资源目录映射==================
  WebAnnexFilePath: WebAnnexFile
  DataBackupFilePath: DataBackupFile
  TemporaryFilePath: TemporaryFile
  SystemFilePath: SystemFile
  TemplateFilePath: TemplateFile
  EmailFilePath: EmailFile
  DocumentFilePath: DocumentFile
  DocumentPreviewPath: DocumentPreview
  UserAvatarFilePath: UserAvatar
  IMContentFilePath: IMContentFile
  MPMaterialFilePath: MPMaterial
  TemplateCodePath: TemplateCode
  BiVisualPath: BiVisualPath
  # ===============功能格式限制==================
  MPUploadFileType: bmp,png,jpeg,jpg,gif,mp3,wma,wav,amr,mp4
  WeChatUploadFileType: jpg,png,doc,docx,ppt,pptx,xls,xlsx,pdf,txt,rar,zip,csv,amr,mp4

  AllowUploadImageType: jpg,gif,png,bmp,jpeg,tiff,psd,swf,svg,pcx,dxf,wmf,emf,lic,eps,tga #允许上传图片类型
  AllowUploadFileType: jpg,gif,png,bmp,jpeg,doc,docx,ppt,pptx,xls,xlsx,pdf,txt,rar,zip,csv,mp3 #允许上传文件类型
  AllowPreviewFileType: doc,docx,xls,xlsx,ppt,pptx,pdf,jpg,gif,png,bmp,jpeg #允许预览文件类型
  PreviewType: kkfile #文件预览方式 （1.yozo 2.kkfile）默认使用kkfile
  kkFileUrl: http://127.0.0.1:30090/FileServer/ #kkfile文件预览服务地址
  ApiDomain: http://127.0.0.1:30000 #后端域名(文档预览中使用)
  FrontDomain: http://127.0.0.1:3000 #前端域名(文档预览中使用)
  AppDomain: http://127.0.0.1:8080 #app/h5端域名配置(文档预览中使用)

  CodeAreasName: example #代码生成器模块命名


  #===================== unipush =====================
  AppPushUrl: https://11111.bspapp.com/unipush

  #===================== 多租户 =====================
  MultiTenancy: false #是否开启

  #===================== 系统及错误报告反馈相关 =====================
  SoftName: java-boot #项目名
  SoftFullName: 快速开发平台 #项目全名
  SoftVersion: v3.4.7 #版本号

  RecordLog: false #系统日志启用
  ErrorReport: false #软件错误报告
  ErrorReportTo: surrpot@xxx.com #软件错误报告接收者
  IgexinEnabled: false #推送启动

  #===================== APP =====================
  AppVersion: V3.4.7 #APP版本号
  IgexinAppid: 11HLFY9T2d1z7MySY8hwGwh4 #APPID：应用的唯一标识
  IgexinAppkey: 116Uiduugq648YDChhCjAt59 #APPKEY：公匙（相当于账号）
  IgexinMastersecret: 11pEyQm156SJ9iS7PbyjLCZ6 #Mastersecret：私匙（相当于密码）
  AppUpdateContent: ; #APP更新内容

  #===================== 系统功能配置 =====================
  EnablePreAuth: false #是否开启接口鉴权
  EnableLogicDelete: false #是否开启逻辑删除